# import Token from "Token.graphql"
# import TickByUser from "Tick.graphql"
# import ActivityCount from "Activity.graphql"

type FollowerCount {
    count: Int!
}

type FollowingCount {
    count: Int!
}

type User {
    id: Int!
    first_name: String!
    last_name: String!
    email: String!
    is_premium: Boolean!
    sex: Int!
    user_site: String!
    password: String!
    city: String!
    bio: String!
    date_created: String!
    last_updated: String!
    ticks: [TickByUser!]!
    activityCount: ActivityCount!
    followerCount: FollowerCount!
    followingCount: FollowingCount!
}

type UserInitResponse {
    user: User!
    token: String!
}

input CreateUserInput {
    email: String!
    password: String!
    password2: String!
    first_name: String
    last_name: String
    legal: Boolean!
}

type ResetPasswordEmailResponse {
    email: String!
}

type FollowUserResponse {
    user_id: Int!
}

# Queries

type Query {
    login(email: String!, password: String!): UserInitResponse!
    getOtherUser(id: Int!): User!
    getUserFromToken: User!
    resetPasswordEmail(email: String!): ResetPasswordEmailResponse!
}

# Mutations

type Mutation {
    createUser(input: CreateUserInput!): UserInitResponse!
    savePasswordReset(new_password: String!, new_password_2: String!, signature: String!): ResetPasswordEmailResponse!
    editUser(
        first_name: String!,
        last_name: String!,
        email: String!,
        is_premium: Boolean!,
        sex: Int!,
        user_site: String!,
        password: String!,
        city: String!,
        bio: String!,
        date_created: Int!,
        last_updated: Int!
    ): User!
    deleteUser(id: Int!): User!
    followUser(leader_id: Int!): FollowUserResponse!
}